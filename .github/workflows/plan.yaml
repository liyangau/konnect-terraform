name: Pull Request Main

on:
  pull_request:
    branches:
      - main
  # Allows to run this workflow manually
  workflow_dispatch:
  
permissions:
  pull-requests: write

jobs:
  plan:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
      TF_VAR_system_token: ${{ secrets.KONNECT_SYSTEM_TOKEN }}
      TF_VAR_cp_region: "au"
      TF_VAR_exclude_mesh_control_plane: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4

    #   - name: Setup Terraform
    #     uses: hashicorp/setup-terraform@v3
    #     with:
    #       terraform_version: 1.8.0
    #       terraform_wrapper: false
            
    #   - name: Terraform Init and Plan
    #     id: plan
    #     working-directory: ./
    #     run: |
    #       terraform init
    #       plan_output=$(terraform plan -out plan.out -no-color)
    #       echo "::set-output name=plan::${plan_output}"
    #       echo "${plan_output}" > plan.txt
    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
    #       TF_VAR_system_token: ${{ secrets.KONNECT_SYSTEM_TOKEN }}
    #       TF_VAR_cp_region: "au"
    #       TF_VAR_exclude_mesh_control_plane: "true"

    #   - name: Upload Terraform Plan out as artifact
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: plan
    #       path: ./plan.txt

    #   - name: Comment PR with Terraform Plan
    #     uses: actions/github-script@v6
    #     if: github.event_name == 'pull_request'
    #     with:
    #       github-token: ${{ secrets.GH_TOKEN }}
    #       script: |
    #         const fs = require('fs');
    #         const planOutput = fs.readFileSync('${{ github.workspace }}/plan.txt', 'utf8');
    #         github.rest.issues.createComment({
    #           ...context.repo,
    #           issue_number: context.issue.number,
    #           body: "### Terraform Plan Output\n" + "```\n" + planOutput + "\n```"
    #         });


  

